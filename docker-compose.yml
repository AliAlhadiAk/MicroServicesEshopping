version: '3.4'

services:
  microserviceseshopping:
    image: ${DOCKER_REGISTRY-}microserviceseshopping
    build:
      context: .
      dockerfile: MicroServicesEshopping/Dockerfile
    depends_on:
      - mongodb
      - redis
    environment:
      - MONGO_URL=mongodb://mongodb:27017/BooksDb
      - REDIS_URL=redis://redis:6379  
    ports:
      - "5000:8080" 
    networks:
      - app-network

  yarpapigateway:
    image: ${DOCKER_REGISTRY-}yarpapigateway
    build:
      context: ./YarpApiGateway
      dockerfile: Dockerfile
    depends_on:
     - microserviceseshopping
    ports:
     - 8083:8080
     - 8081:8081
    networks:
      - app-network

  identityservice:
    image: ${DOCKER_REGISTRY-}identityservice
    build:
      context: ./IdentityService
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - POSTGRES_URL=postgres://user:password@postgres:5432/identitydb
    ports:
      - "8082:80"  # Adjust this if your application uses a different port inside the container
    networks:
      - app-network

  mygrpcservice:
    image: ${DOCKER_REGISTRY-}mygrpcservice
    build:
      context: ./MyGrpcService
      dockerfile: Dockerfile
    depends_on:
      - sqlserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SQLSERVER_CONNECTIONSTRING=Server=sqlserver;Database=MyDatabase;User=sa;Password=YourPassword!
    ports:
      - "5001:5000"  
    networks:
      - app-network

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: "YourPassword!"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
